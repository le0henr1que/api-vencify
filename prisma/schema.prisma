generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum LoginMethodEnum {
  EMAIL
  GOOGLE
  FACEBOOK
}

enum NotificationTimeEnum {
  DAILY
  WEEKLY
  MONTHLY
  HALF_MONTHLY
  THIRTY_MONTHLY
}

model AuditLog {
  id          Int           @id @default(autoincrement())
  ip          String        @db.VarChar(255)
  email       String        @db.VarChar(255)
  url         String        @db.VarChar(2000)
  information String        @db.VarChar(2000)
  created_at  DateTime      @default(now()) @db.Timestamptz(3)
  action      LogActionEnum
  status      LogStatusEnum
  method      MethodEnum

  @@map("TB_AUDIT_LOG")
}

model Organization {
  id               String             @id @default(uuid()) @map("_id")
  name             String             @db.VarChar(255)
  created_at       DateTime           @default(now()) @db.Timestamptz(3)
  updated_at       DateTime?          @updatedAt @db.Timestamptz(3)
  ownerId          String?            @db.VarChar
  status           StatusEnum         @default(ACTIVE)
  deleted_at       DateTime?          @db.Timestamptz(3)
  version          Int                @default(1)
  OrganizationUser OrganizationUser[]
  owner            User?              @relation("OrganizationOwner", fields: [ownerId], references: [id])

  address_id String?  @db.VarChar
  address    Address? @relation(fields: [address_id], references: [id])

  @@map("TB_ORGANIZATION")
}

model Address {
  id           String         @id @default(uuid()) @map("_id")
  street       String         @db.VarChar(255)
  number       String?        @db.VarChar(50)
  complement   String?        @db.VarChar(255)
  neighborhood String?        @db.VarChar(255)
  city         String         @db.VarChar(255)
  state        String         @db.VarChar(255)
  postalCode   String         @db.VarChar(20)
  country      String         @db.VarChar(255)
  created_at   DateTime       @default(now()) @db.Timestamptz(3)
  updated_at   DateTime?      @updatedAt @db.Timestamptz(3)
  deleted_at   DateTime?      @db.Timestamptz(3)
  Organization Organization[]

  @@map("TB_ADDRESS")
}

model OrganizationUser {
  organizationId String           @db.VarChar
  userId         String           @db.VarChar
  organization   Organization     @relation(fields: [organizationId], references: [id])
  user           User             @relation(fields: [userId], references: [id])
  UserAssignment UserAssignment[] @relation("UserOrganizations")
  Roles          UserRole[]       @relation("OrganizationUserRole")

  @@id([organizationId, userId])
}

model Plan {
  id             String         @id @default(uuid()) @map("_id")
  planIdPlatform String?        @db.VarChar
  name           String         @db.VarChar(255)
  description    String?        @db.VarChar(255)
  popular        Boolean        @default(false)
  buttonText     String         @default("Assinar Plano") @db.VarChar(255)
  benefitList    String[]       @db.VarChar(500)
  price          Decimal        @db.Decimal(10, 2)
  durationInDays Int
  userLimit      Int
  created_at     DateTime       @default(now()) @db.Timestamptz(3)
  updated_at     DateTime?      @updatedAt @db.Timestamptz(3)
  status         StatusEnum     @default(ACTIVE)
  deleted_at     DateTime?      @db.Timestamptz(3)
  version        Int            @default(1)
  quota          Quota[]
  subscriptions  Subscription[]

  @@map("TB_PLAN")
}

model Subscription {
  id         String     @id @default(uuid()) @map("_id")
  planId     String     @db.VarChar
  startDate  DateTime   @default(now()) @db.Timestamptz(3)
  endDate    DateTime   @db.Timestamptz(3)
  status     StatusEnum @default(ACTIVE)
  deleted_at DateTime?  @db.Timestamptz(3)
  version    Int        @default(1)
  user_id    String     @db.VarChar
  user       User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  plan       Plan       @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@map("TB_SUBSCRIPTION")
}

model Quota {
  id           String    @id @default(uuid()) @map("_id")
  user_id      String    @db.VarChar
  usersCreated Int       @default(0)
  created_at   DateTime  @default(now()) @db.Timestamptz(3)
  updated_at   DateTime? @updatedAt @db.Timestamptz(3)
  planId       String    @db.VarChar
  deleted_at   DateTime? @db.Timestamptz(3)
  version      Int       @default(1)
  user         User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  plan         Plan      @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@map("TB_QUOTA")
}

model User {
  id                     String               @id @default(uuid()) @map("_id")
  name                   String               @db.VarChar(255)
  email                  String               @unique @db.VarChar(255)
  password               String               @db.VarChar(255)
  login_method           LoginMethodEnum      @default(EMAIL)
  loginAttempts          Int                  @default(0)
  blocked                Boolean              @default(false)
  ip                     String?              @db.VarChar(100)
  created_at             DateTime             @default(now()) @db.Timestamptz(3)
  refreshToken           String?              @db.VarChar(255)
  recoveryToken          String?              @db.VarChar(255)
  emailVerificationToken String?              @db.VarChar(255)
  isEmailVerified        Boolean              @default(false)
  hasCompletedCheckout   Boolean              @default(false)
  updated_at             DateTime?            @updatedAt @db.Timestamptz(3)
  deleted_at             DateTime?            @db.Timestamptz(3)
  version                Int                  @default(1)
  mediaId                String?
  status                 StatusEnum           @default(ACTIVE)
  organizationUser       OrganizationUser[]
  ownedOrganizations     Organization[]       @relation("OrganizationOwner")
  Media                  Media?               @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  notifications_enabled  Boolean              @default(true)
  notification_time_enum NotificationTimeEnum @default(DAILY)
  notification_time      Int                  @default(1)

  Subscription Subscription[]
  Quota        Quota[]

  @@map("TB_USER")
}

model email_verifications {
  id         String    @id @default(uuid()) @map("_id")
  email      String    @unique @db.VarChar(255)
  token      String    @db.VarChar(255)
  password   String    @db.VarChar(255)
  name       String    @db.VarChar(255)
  created_at DateTime? @default(now()) @db.Timestamptz(3)
  updated_at DateTime? @updatedAt @db.Timestamptz(3)
  deleted_at DateTime? @db.Timestamptz(3)

  @@map("TB_EMAIL_VERIFICATIONS")
}

model Product {
  id          String     @id @default(uuid()) @map("_id")
  name        String     @db.VarChar(255)
  description String?    @db.VarChar(255)
  price       Decimal    @db.Decimal(10, 2)
  code        String     @db.VarChar(255)
  validate    DateTime?  @db.Timestamptz(3)
  local       String?    @db.VarChar(255)
  bar_code    String?    @db.VarChar(255)
  status      StatusEnum @default(ACTIVE)
  created_at  DateTime   @default(now()) @db.Timestamptz(3)
  updated_at  DateTime?  @updatedAt @db.Timestamptz(3)
  deleted_at  DateTime?  @db.Timestamptz(3)
  version     Int        @default(1)
  category    Category?  @relation(fields: [category_id], references: [id])
  category_id String?
  batches     Batch[]

  @@map("TB_PRODUCT")
}

model Batch {
  id          String     @id @default(uuid()) @map("_id")
  product     Product    @relation(fields: [product_id], references: [id], onDelete: Cascade)
  product_id  String
  quantity    Int        @default(0)
  batchCode   String     @db.VarChar(255)
  expires_at  DateTime?  @db.Timestamptz(3)
  created_at  DateTime   @default(now()) @db.Timestamptz(3)
  updated_at  DateTime?  @updatedAt @db.Timestamptz(3)
  deleted_at  DateTime?  @db.Timestamptz(3)
  supplier    Supplier?  @relation(fields: [supplier_id], references: [id])
  supplier_id String?
  version     Int        @default(1)
  status      StatusEnum @default(ACTIVE)

  @@map("TB_BATCH")
}

model Supplier {
  id          String     @id @default(uuid()) @map("_id")
  name        String     @db.VarChar(255)
  contactInfo String?    @db.VarChar(255)
  created_at  DateTime   @default(now()) @db.Timestamptz(3)
  updated_at  DateTime?  @updatedAt @db.Timestamptz(3)
  deleted_at  DateTime?  @db.Timestamptz(3)
  version     Int        @default(1)
  status      StatusEnum @default(ACTIVE)
  batches     Batch[]
  Category    Category[]

  @@map("TB_SUPPLIER")
}

model Category {
  id          String     @id @default(uuid()) @map("_id")
  name        String     @db.VarChar(255)
  description String?    @db.VarChar(255)
  status      StatusEnum @default(ACTIVE)
  created_at  DateTime   @default(now()) @db.Timestamptz(3)
  updated_at  DateTime?  @updatedAt @db.Timestamptz(3)
  deleted_at  DateTime?  @db.Timestamptz(3)
  version     Int        @default(1)

  supplier    Supplier  @relation(fields: [supplier_id], references: [id])
  supplier_id String
  products    Product[]

  @@map("TB_CATEGORY")
}

model UserAssignment {
  id                       String            @id @default(uuid()) @map("_id")
  create                   Boolean           @default(false)
  read                     Boolean           @default(false)
  update                   Boolean           @default(false)
  delete                   Boolean           @default(false)
  assignmentsId            String            @db.VarChar
  organizationUserId       String            @db.VarChar
  organizationId           String?
  userId                   String?
  organizationUserRelation OrganizationUser? @relation("UserOrganizations", fields: [organizationId, userId], references: [organizationId, userId])
  Assignment               Assignment        @relation(fields: [assignmentsId], references: [id], onDelete: Cascade)

  @@map("TB_USER_ASSIGNMENT")
}

model Assignment {
  id                 String           @id @default(uuid()) @map("_id")
  created_at         DateTime         @default(now()) @db.Timestamptz(3)
  deleted_at         DateTime?        @db.Timestamptz(3)
  name               AssignmentsEnum  @unique
  status             StatusEnum       @default(ACTIVE)
  ProfileAssignments UserAssignment[]

  @@map("TB_ASSIGNMENT")
}

model UserRole {
  id                       String            @id @default(uuid()) @map("_id")
  roleId                   String            @db.VarChar
  organizationUserId       String            @db.VarChar
  organizationId           String?
  userId                   String?
  organizationUserRelation OrganizationUser? @relation("OrganizationUserRole", fields: [organizationId, userId], references: [organizationId, userId])
  role                     Role              @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@map("TB_USER_ROLE")
}

model Role {
  id         String     @id @default(uuid()) @map("_id")
  created_at DateTime   @default(now()) @db.Timestamptz(3)
  deleted_at DateTime?  @db.Timestamptz(3)
  name       RoleEnum   @unique
  status     StatusEnum @default(ACTIVE)
  UserRole   UserRole[]

  @@map("TB_ROLE")
}

model Media {
  id          String   @id @default(uuid()) @map("_id")
  url         String   @db.VarChar(800)
  createdDate DateTime @default(now()) @db.Timestamptz(3)
  User        User[]

  @@map("TB_MEDIA")
}

enum RoleEnum {
  USER
  ADMIN
}

enum StatusEnum {
  ACTIVE
  PENDING
  INACTIVE
}

enum PersonTypeEnum {
  CRIANCA
  ADULTO
}

enum LogActionEnum {
  LOGIN
  CREATE
  UPDATE
  DELETE
  INACTIVE
  REACTIVE
  LOGOUT
  PASSWORD_RESET
  FIRST_ACCESS
  RESEND_EMAIL
  CHANGE_PERMISSION
  CHANGE_PASSWORD
  SEND_EMAIL_RECOVERY_PASSWORD
  CHANGE_PERSONAL_INFORMATION
  REFRESH_TOKEN
  BLOCK
  UNBLOCK
  MULTIPLE_LOGIN
  DISABLED_USER
}

enum LogStatusEnum {
  SUCCESS
  ERROR
}

enum MethodEnum {
  GET
  POST
  PUT
  PATCH
  DELETE
}

enum AssignmentsEnum {
  USER
  ORGANIZATION
  PLAN
  CATEGORY
  PRODUCT
  BATCH
  SUPPLIER
  ADDRESS
}
